#!/usr/bin/env python3
"""
Test the integration of sentiment data with the Capital.com optimizer

This script verifies that the sentiment data generated by the tools in this directory
can be properly loaded and used by the optimizer components of the Jamso AI Engine.
"""

import os
import sys
import json
import pandas as pd
import numpy as np
from datetime import datetime, timedelta
import logging

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# Add parent directory to path
current_dir = os.path.dirname(os.path.abspath(__file__))
parent_dir = os.path.dirname(current_dir)
if parent_dir not in sys.path:
    sys.path.append(parent_dir)

def load_sentiment_data(file_path):
    """Load sentiment data from the JSON file."""
    try:
        with open(file_path, 'r') as f:
            sentiment_data = json.load(f)
        return sentiment_data
    except Exception as e:
        logger.error(f"Error loading sentiment data: {str(e)}")
        return None

def test_sentiment_availability():
    """Test if sentiment data is available and properly formatted."""
    sentiment_path = os.path.join(parent_dir, "src", "Database", "Sentiment", "sentiment_data.json")
    
    if not os.path.exists(sentiment_path):
        logger.error(f"Sentiment data file not found at {sentiment_path}")
        return False
    
    sentiment_data = load_sentiment_data(sentiment_path)
    if not sentiment_data:
        return False
    
    # Check if the expected symbols are in the data
    expected_symbols = ["BTCUSD", "ETHUSD"]
    missing_symbols = [symbol for symbol in expected_symbols if symbol not in sentiment_data]
    
    if missing_symbols:
        logger.error(f"Missing sentiment data for symbols: {', '.join(missing_symbols)}")
        return False
    
    # Check if each symbol has enough data points
    min_required_points = 1000  # At least ~40 days of hourly data
    
    for symbol in expected_symbols:
        data_points = len(sentiment_data[symbol])
        if data_points < min_required_points:
            logger.error(f"Not enough data points for {symbol}: {data_points} < {min_required_points}")
            return False
        logger.info(f"Symbol {symbol} has {data_points} sentiment data points")
        
        # Test a few random values to ensure they're in the expected range
        values = list(sentiment_data[symbol].values())
        if max(values) > 1.0 or min(values) < -1.0:
            logger.error(f"Sentiment values for {symbol} outside expected range [-1, 1]")
            return False
    
    logger.info("All sentiment data checks passed!")
    return True

def test_optimizer_integration():
    """Test that the optimizer can properly load and use the sentiment data."""
    try:
        # Import optimizer modules dynamically to avoid import errors if not installed
        from src.AI.capital_optimizer import CapitalOptimizer, load_sentiment_for_symbol
        
        # Test sentiment loading function
        symbol = "BTCUSD"
        timeframe = "HOUR"
        sentiment = load_sentiment_for_symbol(symbol)
        
        if sentiment is None or len(sentiment) == 0:
            logger.error(f"Failed to load sentiment for {symbol}")
            return False
        
        logger.info(f"Successfully loaded {len(sentiment)} sentiment data points for {symbol}")
        
        # Test if the optimizer can use the sentiment data
        # This doesn't run a full optimization, just checks that the optimizer
        # can integrate with the sentiment data
        end_date = datetime.now()
        start_date = end_date - timedelta(days=30)
        
        optimizer = CapitalOptimizer(
            symbol=symbol,
            timeframe=timeframe,
            start_date=start_date.strftime('%Y-%m-%d'),
            end_date=end_date.strftime('%Y-%m-%d'),
            use_sentiment=True
        )
        
        # If we get here without errors, the basic integration works
        logger.info("Optimizer integration test passed!")
        return True
        
    except ImportError as e:
        logger.warning(f"Optimizer modules not available: {str(e)}")
        logger.warning("Skipping optimizer integration test")
        return None
    except Exception as e:
        logger.error(f"Error testing optimizer integration: {str(e)}")
        return False

def main():
    print("\n=== Sentiment Data Integration Test ===\n")
    
    # Test data availability
    print("Testing sentiment data availability...")
    data_available = test_sentiment_availability()
    
    if data_available:
        print("\n✓ Sentiment data is available and properly formatted")
    else:
        print("\n✗ Issues found with sentiment data")
        print("  Run the capital_sentiment_import.py script to generate sentiment data")
        return 1
    
    # Test optimizer integration
    print("\nTesting optimizer integration...")
    integration_result = test_optimizer_integration()
    
    if integration_result is True:
        print("\n✓ Optimizer can successfully use sentiment data")
    elif integration_result is False:
        print("\n✗ Optimizer integration test failed")
        return 1
    else:
        print("\n! Optimizer integration test skipped (modules not available)")
    
    print("\nAll tests completed successfully!")
    return 0

if __name__ == "__main__":
    sys.exit(main())
